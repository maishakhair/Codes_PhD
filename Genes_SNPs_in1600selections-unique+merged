# Load necessary libraries
library(dplyr)
library(stringr)
library(readxl)

# File paths
all_selections_path <- "G:/My Drive/Dropbox/Ferdig Lab/WGS/2nd WGS batch 2024/allselections_missense_stop.xlsx"
output_path <- "G:/My Drive/Dropbox/Ferdig Lab/WGS/2nd WGS batch 2024/final_1600_selection_table_v3.csv"

# Step 1: Recreate the Parent SNPs List
parent_sheets <- c("I-001_BULK", "I-001_CLONE", "I-001_sibling")

parent_snps <- bind_rows(lapply(parent_sheets, function(sheet) {
  data <- readxl::read_excel(all_selections_path, sheet = sheet, col_names = FALSE)
  colnames(data) <- "raw_data"
  data %>%
    mutate(
      gene_ID = str_extract(raw_data, "^[^_]+_[^_]+"),  # Extract gene_ID
      SNP = str_extract(raw_data, "_p.*$")  # Extract SNP
    )
})) %>%
  distinct()

cat("Parent SNPs Count:", nrow(parent_snps), "\n")

# Step 2: Filter Parent SNPs from All Selections
filter_parent_snps <- function(sheet_name, file_path) {
  data <- readxl::read_excel(file_path, sheet = sheet_name, col_names = FALSE)
  colnames(data) <- "raw_data"
  data <- data %>%
    mutate(
      gene_ID = str_extract(raw_data, "^[^_]+_[^_]+"),  # Extract gene_ID
      SNP = str_extract(raw_data, "_p.*$")  # Extract SNP
    ) %>%
    filter(!paste0(gene_ID, SNP) %in% paste0(parent_snps$gene_ID, parent_snps$SNP))
  return(data)
}

# Step 3: Combine Low-Dose SNPs for Each Selection
low_dose_groups <- list(
  "1-1" = c("1-1-200", "1-1-800"),
  "1-2" = c("1-2-200", "1-2-600"),
  "2-1" = c("2-1-200", "2-1-800"),
  "2-2" = c("2-2-200")
)

combine_low_doses <- function(group, file_path) {
  combined <- bind_rows(lapply(group, function(sheet) {
    tryCatch(filter_parent_snps(sheet, file_path), error = function(e) NULL)
  })) %>%
    distinct()
  return(combined)
}

low_doses <- lapply(low_dose_groups, combine_low_doses, file_path = all_selections_path)

cat("Low-Dose SNPs Counts:\n")
lapply(low_doses, function(data) {
  print(nrow(data))  # Number of SNPs in each combined low dose
})

# Step 4: Filter High-Dose SNPs by Removing Low-Dose SNPs
filter_high_doses <- function(high_sheet, low_dose_data, file_path) {
  high_dose <- filter_parent_snps(high_sheet, file_path)
  filtered_high <- high_dose %>%
    filter(!paste0(gene_ID, SNP) %in% paste0(low_dose_data$gene_ID, low_dose_data$SNP))
  return(filtered_high)
}

filtered_high_doses <- list(
  "1-1-1600" = filter_high_doses("1-1-1600", low_doses[["1-1"]], all_selections_path),
  "1-2-1600" = filter_high_doses("1-2-1600", low_doses[["1-2"]], all_selections_path),
  "2-1-1600" = filter_high_doses("2-1-1600", low_doses[["2-1"]], all_selections_path),
  "2-2-1600" = filter_high_doses("2-2-1600", low_doses[["2-2"]], all_selections_path)
)

cat("Filtered High-Dose SNPs Counts:\n")
lapply(filtered_high_doses, function(data) {
  print(nrow(data))  # Number of SNPs in each high dose
})

# Step 5: Identify Genes Present in at Least Two High-Dose Selections
# Create a data frame with all gene_IDs from high-dose selections
high_dose_gene_counts <- bind_rows(lapply(names(filtered_high_doses), function(name) {
  data <- filtered_high_doses[[name]]
  data %>%
    select(gene_ID) %>%
    mutate(selection = name)
})) %>%
  group_by(gene_ID) %>%
  summarise(count = n(), selections = paste(selection, collapse = ";")) %>%
  filter(count >= 2)  # Keep genes present in at least two selections

common_genes <- high_dose_gene_counts$gene_ID
cat("Common Genes Count (>=2 selections):", length(common_genes), "\n")

# Step 6: Extract Unique SNPs in 1600nM Selections for Common Genes
unique_snps_per_gene <- lapply(filtered_high_doses, function(data) {
  data %>%
    filter(gene_ID %in% common_genes) %>%
    group_by(gene_ID) %>%
    summarise(SNPs = paste(unique(SNP), collapse = ";"))
})

# Step 7: Combine Results into Final Table
final_table <- Reduce(function(x, y) {
  full_join(x, y, by = "gene_ID")
}, unique_snps_per_gene)

colnames(final_table) <- c("gene_ID", "1-1-1600_SNPs", "1-2-1600_SNPs", "2-1-1600_SNPs", "2-2-1600_SNPs")

cat("Final Table Row Count:", nrow(final_table), "\n")

# Step 8: Save the Final Table
tryCatch({
  write.csv(final_table, output_path, row.names = FALSE)
  cat("Final table saved to:", output_path, "\n")
}, error = function(e) {
  cat("Error saving the file. Please check permissions or file path.\n")
})
